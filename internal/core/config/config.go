// Code generated by godddx, DO AVOID EDIT.
package config

import (
	"context"
	"log/slog"

	"github.com/ixugo/goddd/pkg/orm"
	"github.com/ixugo/goddd/pkg/reason"
	"github.com/jinzhu/copier"
)

// ConfigStorer Instantiation interface
type ConfigStorer interface {
	Find(context.Context, *[]*Config, orm.Pager, ...orm.QueryOption) (int64, error)
	Get(context.Context, *Config, ...orm.QueryOption) error
	Add(context.Context, *Config) error
	Edit(context.Context, *Config, func(*Config), ...orm.QueryOption) error
	Del(context.Context, *Config, ...orm.QueryOption) error

	FirstOrCreate(*Config) error
}

// FindConfig Paginated search
func (c *Core) FindConfig(ctx context.Context, in *FindConfigInput) ([]*Config, int64, error) {
	items := make([]*Config, 0)
	total, err := c.store.Config().Find(ctx, &items, in)
	if err != nil {
		return nil, 0, reason.ErrDB.Withf(`Find err[%s]`, err.Error())
	}
	return items, total, nil
}

// GetConfig Query a single object
func (c *Core) GetConfig(ctx context.Context, id int) (*Config, error) {
	var out Config
	if err := c.store.Config().Get(ctx, &out, orm.Where("id=?", id)); err != nil {
		if orm.IsErrRecordNotFound(err) {
			return nil, reason.ErrNotFound.Withf(`Get err[%s]`, err.Error())
		}
		return nil, reason.ErrDB.Withf(`Get err[%s]`, err.Error())
	}
	return &out, nil
}

// AddConfig Insert into database
func (c *Core) AddConfig(ctx context.Context, in *AddConfigInput) (*Config, error) {
	var out Config
	if err := copier.Copy(&out, in); err != nil {
		slog.ErrorContext(ctx, "Copy", "err", err)
	}
	if err := c.store.Config().Add(ctx, &out); err != nil {
		return nil, reason.ErrDB.Withf(`Add err[%s]`, err.Error())
	}
	return &out, nil
}

// EditConfig Update object information
func (c *Core) EditConfig(ctx context.Context, in *EditConfigInput, id int) (*Config, error) {
	var out Config
	if err := c.store.Config().Edit(ctx, &out, func(b *Config) {
		if err := copier.Copy(b, in); err != nil {
			slog.ErrorContext(ctx, "Copy", "err", err)
		}
	}, orm.Where("id=?", id)); err != nil {
		return nil, reason.ErrDB.Withf(`Edit err[%s]`, err.Error())
	}
	return &out, nil
}

// DelConfig Delete object
func (c *Core) DelConfig(ctx context.Context, id int) (*Config, error) {
	var out Config
	if err := c.store.Config().Del(ctx, &out, orm.Where("id=?", id)); err != nil {
		return nil, reason.ErrDB.Withf(`Del err[%s]`, err.Error())
	}
	return &out, nil
}
