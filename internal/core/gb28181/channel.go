// Code generated by godddx, DO AVOID EDIT.
package gb28181

import (
	"context"
	"log/slog"
	"strconv"
	"strings"

	"github.com/gowvp/gb28181/internal/core/bz"
	"github.com/ixugo/goddd/pkg/orm"
	"github.com/ixugo/goddd/pkg/reason"
	"github.com/jinzhu/copier"
)

// ChannelStorer Instantiation interface
type ChannelStorer interface {
	Find(context.Context, *[]*Channel, orm.Pager, ...orm.QueryOption) (int64, error)
	Get(context.Context, *Channel, ...orm.QueryOption) error
	Add(context.Context, *Channel) error
	Edit(context.Context, *Channel, func(*Channel), ...orm.QueryOption) error
	Del(context.Context, *Channel, ...orm.QueryOption) error

	BatchEdit(context.Context, string, any, ...orm.QueryOption) error // 批量更新一个字段
}

// FindChannel Paginated search
func (c *Core) FindChannel(ctx context.Context, in *FindChannelInput) ([]*Channel, int64, error) {
	items := make([]*Channel, 0)

	query := orm.NewQuery(1)
	query.OrderBy("channel_id ASC")
	if in.DeviceID != "" {
		query.Where("device_id = ?", in.DeviceID)
	}
	if in.Key != "" {
		if strings.HasPrefix(in.Key, bz.IDPrefixGBChannel) {
			query.Where("id=?", in.Key)
		} else {
			query.Where("channel_id like ? OR name like ?", "%"+in.Key+"%", "%"+in.Key+"%")
		}
	}
	if in.DID != "" {
		query.Where("did=?", in.DID)
	}

	if in.IsOnline == "true" || in.IsOnline == "false" {
		isOnline, _ := strconv.ParseBool(in.IsOnline)
		query.Where("is_online = ?", isOnline)
	}

	total, err := c.store.Channel().Find(ctx, &items, in, query.Encode()...)
	if err != nil {
		return nil, 0, reason.ErrDB.Withf(`Find err[%s]`, err.Error())
	}
	return items, total, nil
}

// GetChannel Query a single object
func (c *Core) GetChannel(ctx context.Context, id string) (*Channel, error) {
	var out Channel
	if err := c.store.Channel().Get(ctx, &out, orm.Where("id=?", id)); err != nil {
		if orm.IsErrRecordNotFound(err) {
			return nil, reason.ErrNotFound.Withf(`Get err[%s]`, err.Error())
		}
		return nil, reason.ErrDB.Withf(`Get err[%s]`, err.Error())
	}
	return &out, nil
}

// AddChannel Insert into database
func (c *Core) AddChannel(ctx context.Context, in *AddChannelInput) (*Channel, error) {
	var out Channel
	if err := copier.Copy(&out, in); err != nil {
		slog.ErrorContext(ctx, "Copy", "err", err)
	}
	if err := c.store.Channel().Add(ctx, &out); err != nil {
		return nil, reason.ErrDB.Withf(`Add err[%s]`, err.Error())
	}
	return &out, nil
}

// EditChannel Update object information
func (c *Core) EditChannel(ctx context.Context, in *EditChannelInput, id string) (*Channel, error) {
	var out Channel
	if err := c.store.Channel().Edit(ctx, &out, func(b *Channel) {
		if err := copier.Copy(b, in); err != nil {
			slog.ErrorContext(ctx, "Copy", "err", err)
		}
	}, orm.Where("id=?", id)); err != nil {
		return nil, reason.ErrDB.Withf(`Edit err[%s]`, err.Error())
	}
	return &out, nil
}

// DelChannel Delete object
func (c *Core) DelChannel(ctx context.Context, id string) (*Channel, error) {
	var out Channel
	if err := c.store.Channel().Del(ctx, &out, orm.Where("id=?", id)); err != nil {
		return nil, reason.ErrDB.Withf(`Del err[%s]`, err.Error())
	}
	return &out, nil
}
