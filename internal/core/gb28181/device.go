// Code generated by godddx, DO AVOID EDIT.
package gb28181

import (
	"context"
	"log/slog"

	"github.com/gowvp/gb28181/internal/core/bz"
	"github.com/ixugo/goddd/pkg/orm"
	"github.com/ixugo/goddd/pkg/reason"
	"github.com/ixugo/goddd/pkg/web"
	"github.com/jinzhu/copier"
	"gorm.io/gorm"
)

// DeviceStorer Instantiation interface
type DeviceStorer interface {
	Find(context.Context, *[]*Device, orm.Pager, ...orm.QueryOption) (int64, error)
	Get(context.Context, *Device, ...orm.QueryOption) error
	Add(context.Context, *Device) error
	Edit(context.Context, *Device, func(*Device), ...orm.QueryOption) error
	Del(context.Context, *Device, ...orm.QueryOption) error

	Session(ctx context.Context, changeFns ...func(*gorm.DB) error) error
}

func (c Core) FindChannelsForDevice(ctx context.Context, in *FindDeviceInput) ([]*Device, int64, error) {
	items := make([]*Device, 0, in.Limit())

	query := orm.NewQuery(3)
	query.OrderBy("created_at DESC")

	total, err := c.store.Device().Find(ctx, &items, in, query.Encode()...)
	if err != nil {
		return nil, 0, reason.ErrDB.Withf(`Find err[%s]`, err.Error())
	}

	for _, item := range items {
		const size = 3
		item.Children = make([]*Channel, 0, size)
		query := orm.NewQuery(2).OrderBy("created_at DESC").Where("did=?", item.ID)
		_, err := c.store.Channel().Find(ctx, &item.Children, web.PagerFilter{Size: size}, query.Encode()...)
		if err != nil {
			continue
		}

		for _, ch := range item.Children {
			if !item.IsOnline {
				ch.IsOnline = false
			}
		}
	}
	return items, total, nil
}

// FindDevice Paginated search
func (c Core) FindDevice(ctx context.Context, in *FindDeviceInput) ([]*Device, int64, error) {
	items := make([]*Device, 0)

	query := orm.NewQuery(3)
	query.OrderBy("created_at DESC")
	if in.Key != "" {
		query.Where("name LIKE ? OR device_id like ? OR id=?", "%"+in.Key+"%", "%"+in.Key+"%", in.Key)
	}

	total, err := c.store.Device().Find(ctx, &items, in, query.Encode()...)
	if err != nil {
		return nil, 0, reason.ErrDB.Withf(`Find err[%s]`, err.Error())
	}
	return items, total, nil
}

// GetDevice Query a single object
func (c Core) GetDevice(ctx context.Context, id string) (*Device, error) {
	var out Device
	if err := c.store.Device().Get(ctx, &out, orm.Where("id=?", id)); err != nil {
		if orm.IsErrRecordNotFound(err) {
			return nil, reason.ErrNotFound.Withf(`Get err[%s]`, err.Error())
		}
		return nil, reason.ErrDB.Withf(`Get err[%s]`, err.Error())
	}
	return &out, nil
}

func (c Core) GetDeviceByDeviceID(ctx context.Context, deviceID string) (*Device, error) {
	var out Device
	if err := c.store.Device().Get(ctx, &out, orm.Where("device_id=?", deviceID)); err != nil {
		if orm.IsErrRecordNotFound(err) {
			return nil, reason.ErrNotFound.Withf(`Get err[%s]`, err.Error())
		}
		return nil, reason.ErrDB.Withf(`Get err[%s]`, err.Error())
	}
	return &out, nil
}

// AddDevice Insert into database
func (c Core) AddDevice(ctx context.Context, in *AddDeviceInput) (*Device, error) {
	var out Device
	if err := copier.Copy(&out, in); err != nil {
		slog.ErrorContext(ctx, "Copy", "err", err)
	}
	out.ID = c.uniqueID.UniqueID(bz.IDPrefixGB)

	if err := out.Check(); err != nil {
		return nil, reason.ErrBadRequest.SetMsg(err.Error())
	}

	if err := c.store.Device().Add(ctx, &out); err != nil {
		if orm.IsDuplicatedKey(err) {
			return nil, reason.ErrDB.SetMsg("国标 ID 重复，请勿重复添加")
		}
		return nil, reason.ErrDB.Withf(`Add err[%s]`, err.Error())
	}
	return &out, nil
}

// EditDevice Update object information
func (c Core) EditDevice(ctx context.Context, in *EditDeviceInput, id string) (*Device, error) {
	var out Device
	if err := c.store.Device().Edit(ctx, &out, func(b *Device) {
		if err := copier.Copy(b, in); err != nil {
			slog.ErrorContext(ctx, "Copy", "err", err)
		}
	}, orm.Where("id=?", id)); err != nil {
		return nil, reason.ErrDB.Withf(`Edit err[%s]`, err.Error())
	}
	return &out, nil
}

// DelDevice Delete object
func (c Core) DelDevice(ctx context.Context, id string) (*Device, error) {
	var dev Device
	if err := c.store.Device().Del(ctx, &dev, orm.Where("id=?", id)); err != nil {
		return nil, reason.ErrDB.Withf(`Del err[%s]`, err.Error())
	}
	return &dev, nil
}
